{
  "version": 3,
  "sources": [
    "/Users/duhrer/Source/rtf/gpii-testem/src/js/testem-component.js"
  ],
  "names": [
    "fluid",
    "require",
    "gpii",
    "registerNamespace",
    "fs",
    "os",
    "path",
    "process",
    "rimraf",
    "testem",
    "handleTestemLifecycleEvent",
    "componentEvent",
    "testemCallback",
    "eventTransformChain",
    "promise",
    "fireTransformEvent",
    "then",
    "log",
    "wrapSecondaryEvent",
    "that",
    "event",
    "eventPromise",
    "generateSingleUseEventListener",
    "addPromiseTimeout",
    "name",
    "options",
    "wrappedEventTimeout",
    "listenerNamespace",
    "id",
    "removeListener",
    "addListener",
    "resolve",
    "makeArray",
    "arguments",
    "originalPromise",
    "rejectionPayload",
    "timeoutInMillis",
    "timeoutID",
    "setTimeout",
    "clearPromiseTimeout",
    "clearTimeout",
    "getTestemOptions",
    "testemOptions",
    "generateRimrafWrapper",
    "rimrafOptions",
    "rimrafPromise",
    "rimrafError",
    "reject",
    "cleanupTestemContent",
    "testemRegexp",
    "togo",
    "resolvedPath",
    "resolveFluidModulePathSafely",
    "existsSync",
    "readdir",
    "testemError",
    "testemDirs",
    "cleanupPromises",
    "each",
    "dirName",
    "match",
    "push",
    "cleanupSequence",
    "sequence",
    "exception",
    "cleanupDir",
    "cleanupDef",
    "module",
    "resolvePath",
    "isTestemContent",
    "error",
    "logLevel",
    "ERROR",
    "console",
    "cleanup",
    "stage",
    "cleanupDefs",
    "singleDirEntry",
    "cleanupPromise",
    "generateUniqueDirName",
    "basePath",
    "prefix",
    "suffix",
    "resolvedBasePath",
    "dirs",
    "onlyTestemContent",
    "everythingButCoverage",
    "concat",
    "everything",
    "stopServer",
    "express",
    "isDestroyed",
    "constructBrowserArgs",
    "browserArgs",
    "headlessBrowserArgs",
    "env",
    "HEADLESS",
    "constructProxies",
    "sourceDirs",
    "contentDirs",
    "additionalProxies",
    "coverageUrl",
    "proxies",
    "dirPaths",
    "dirDefs",
    "expandedDefs",
    "transform",
    "expandPath",
    "orderedDirDefs",
    "parsePriorityRecords",
    "pathDef",
    "extractProxyPath",
    "additionalProxyDestination",
    "dirPath",
    "defaults",
    "gradeNames",
    "coveragePort",
    "expander",
    "funcName",
    "args",
    "port",
    "cwd",
    "mergePolicy",
    "initial",
    "final",
    "testemDir",
    "tmpdir",
    "reportsDir",
    "testPages",
    "events",
    "constructFixtures",
    "onTestemStart",
    "onTestemExit",
    "onExpressStarted",
    "onFixturesConstructed",
    "stopFixtures",
    "onExpressStopped",
    "onFixturesStopped",
    "browser_disconnect_timeout",
    "browser_start_timeout",
    "timeout",
    "browser_args",
    "framework",
    "tap_quiet_logs",
    "report_file",
    "user_data_dir",
    "on_start",
    "on_exit",
    "src_files",
    "serve_files",
    "test_page",
    "invokers",
    "listeners",
    "priority",
    "func",
    "components",
    "type",
    "createOnEvent",
    "coverage",
    "instrumentSource",
    "promises",
    "sourcePathDef",
    "resolvedSourcePath",
    "resolvePackageOrCwdRelativePath",
    "filePath",
    "lastDirSegment",
    "extractLastContentSegment",
    "instrumentedPath",
    "instrumentedSourceDir",
    "instrumenter",
    "instrument",
    "instrumentationOptions",
    "fail",
    "expandInstrumentedSourceDirs",
    "resolvedInstrumentedSourceDir",
    "coverageDir",
    "instrumentedSourceDirs",
    "distributeOptions",
    "source",
    "target",
    "reports",
    "reporter"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/*\n\n    A Fluid component to assist in making good use of Testem. See the README for details.\n\n */\n/* eslint-env node */\n\"use strict\";\nvar fluid = require(\"infusion\");\n\nvar gpii  = fluid.registerNamespace(\"gpii\");\n\nfluid.require(\"%gpii-express\");\nfluid.require(\"%gpii-testem\");\n\nvar fs      = require(\"fs\");\nvar os      = require(\"os\");\nvar path    = require(\"path\");\nvar process = require(\"process\");\nvar rimraf  = require(\"rimraf\");\n\nrequire(\"./coverageServer\");\nrequire(\"./instrumenter\");\nrequire(\"./reporter\");\nrequire(\"./lib/resolveSafely\");\n\nfluid.registerNamespace(\"gpii.testem\");\n\n/**\n *\n * Fire a pseudo-event, ensuring that a Testem callback is always called regardless of the result.\n *\n * @param {String} componentEvent - The component event to be fired using `fluid.promise.fireTransformEvent`.\n * @param {Function} testemCallback - A function that will be called, for example, when we are ready for Testem to run the tests.\n *\n */\ngpii.testem.handleTestemLifecycleEvent = function (componentEvent, testemCallback) {\n    var eventTransformChain = fluid.promise.fireTransformEvent(componentEvent);\n    eventTransformChain.then(\n        function () {\n            fluid.log(\"Successfully reached the end of promise chain. Firing testem callback.\");\n            testemCallback();\n        },\n        function () {\n            fluid.log(\"Promise chain terminated by promise rejection. Firing testem callback.\");\n            testemCallback();\n        }\n    );\n};\n\n/**\n *\n * A function to wrap a secondary component event so that we can represent the entire startup and shutdown as two chains.\n *\n * @param {Object} that - The component itself.\n * @param {String} event - The event to listen to.\n * @return {Promise} - A promise that will be resolved the next time `event` is fired.\n */\ngpii.testem.wrapSecondaryEvent = function (that, event) {\n    var eventPromise = gpii.testem.generateSingleUseEventListener(that, event);\n    gpii.testem.addPromiseTimeout(eventPromise, \"Timed out while waiting for event '\" + event.name + \"' to fire...\", that.options.wrappedEventTimeout);\n    return eventPromise;\n};\n\n/**\n *\n * Listen for an event once, resolve a promise, and then stop listening.  Also stops listening if the returned promise\n * is resolved/reject externally (for example, by the timeout wrapper.\n *\n * Only works with Fluid Promises, see: http://docs.fluidproject.org/infusion/development/PromisesAPI.html\n *\n * @param {Object} that - The component itself.\n * @param {String} event - The event to wrap with a promise.\n * @return {Promise} - The event promise.\n */\ngpii.testem.generateSingleUseEventListener = function (that, event) {\n    var eventPromise = fluid.promise();\n\n    // Ensure that the listener is removed whether we resolve the promise, or whether someone else does.\n    var listenerNamespace = \"gpii.testem.singleUse.\" + that.id;\n    var removeListener = function () { event.removeListener(listenerNamespace); };\n    eventPromise.then(removeListener, removeListener);\n    event.addListener(function () {\n        eventPromise.resolve(fluid.makeArray(arguments));\n    }, listenerNamespace);\n\n    return eventPromise;\n};\n\n/**\n *\n * Resolve a promise after a given amount of milliseconds.  Used in this package to ensure that the overall promise\n * chain eventually completes, so that Testem's callbacks can be called.\n *\n * Only works with Fluid Promises, see: http://docs.fluidproject.org/infusion/development/PromisesAPI.html\n *\n * @param {Promise} originalPromise - The original promise to wrap in a timeout.\n * @param {Object} rejectionPayload - The payload to use when rejecting the message.\n * @param {Number} timeoutInMillis - The number of milliseconds to wait before timing out.\n * @return {Object} - The original promise.\n */\ngpii.testem.addPromiseTimeout = function (originalPromise, rejectionPayload, timeoutInMillis) {\n    // Hold onto a handle so that we can clear the timeout if needed.\n    var timeoutID = setTimeout(function () {\n        fluid.log(rejectionPayload);\n        originalPromise.resolve();\n    }, timeoutInMillis);\n\n    // Clear the timeout if the original promise is resolved or rejected externally.\n    var clearPromiseTimeout = function () { clearTimeout(timeoutID); };\n    originalPromise.then(clearPromiseTimeout, clearPromiseTimeout);\n\n    return originalPromise;\n};\n\n/**\n *\n * Deliver our effective options to Testem.  We do this this way to avoid exposing options to Testem before they have\n * been completely assembled.\n *\n * @param {Object} that - The component itself.\n * @return {Object} - The Testem options to use for this run.\n *\n */\ngpii.testem.getTestemOptions = function (that) {\n    return that.options.testemOptions;\n};\n\ngpii.testem.generateRimrafWrapper = function (path, rimrafOptions) {\n    return function () {\n        var rimrafPromise = fluid.promise();\n        rimraf(path, rimrafOptions, function (rimrafError) {\n            if (rimrafError) {\n                rimrafPromise.reject(rimrafError);\n            }\n            else {\n                rimrafPromise.resolve();\n            }\n        });\n        return rimrafPromise;\n    };\n};\n\n/**\n *\n * Remove all Testem browser data from this run.\n *\n * @param {String} path - The path to the directory which contains Testem's browser data from this run.\n * @param {Object} rimrafOptions - Configuration options to pass when calling rimraf.\n * @return {Promise} - A promise that will be resolved when cleanup is complete, or rejected if there is an error.\n *\n */\ngpii.testem.cleanupTestemContent = function (path, rimrafOptions) {\n    var testemRegexp = /testem-.+/;\n\n    if (path) {\n\n        var togo = fluid.promise();\n\n        togo.then(function () { fluid.log(\"Removed Testem content...\"); });\n        try {\n            var resolvedPath = gpii.testem.resolveFluidModulePathSafely(path);\n\n            if (fs.existsSync(resolvedPath)) {\n                fs.readdir(resolvedPath, function (testemError, testemDirs) {\n                    if (testemError) {\n                        togo.reject(testemError);\n                    }\n                    else {\n                        var cleanupPromises = [];\n                        fluid.each(testemDirs, function (dirName) {\n                            if (dirName.match(testemRegexp)) {\n                                cleanupPromises.push(gpii.testem.generateRimrafWrapper(dirName, rimrafOptions));\n                            }\n                        });\n\n                        // Remove the enclosing directory as well...\n                        cleanupPromises.push(gpii.testem.generateRimrafWrapper(resolvedPath, rimrafOptions));\n\n                        var cleanupSequence = fluid.promise.sequence(cleanupPromises);\n                        cleanupSequence.then(togo.resolve, togo.reject);\n                    }\n                });\n            }\n            else {\n                fluid.log(\"No testem content found, skipping cleanup...\");\n                togo.resolve();\n            }\n\n        }\n        catch (exception) {\n            togo.reject(exception);\n        }\n\n        return togo;\n    }\n};\n\n/**\n *\n * A static function to remove directories.  Expects to be passed an object like:\n * {\n *  path: \"/path/to/junk\",\n *  name: \"random junk\",\n *  isTestemContent: true\n * }\n *\n * @param {Object} cleanupDef - A cleanup definition, see example above.\n * @param {Object} rimrafOptions - Configuration options to pass when calling rimraf.\n * @return {Function} - A promise-returning function which will be executed when it's our turn in the sequence.\n *\n */\ngpii.testem.cleanupDir = function (cleanupDef, rimrafOptions) {\n    return function () {\n        var resolvedPath = fluid.module.resolvePath(cleanupDef.path);\n        if (cleanupDef.isTestemContent) {\n            return gpii.testem.cleanupTestemContent(resolvedPath, rimrafOptions);\n        }\n        else {\n            var promise = fluid.promise();\n\n            try {\n                if (!fs.existsSync(resolvedPath)) {\n                    fluid.log(\"No content exists for \" + cleanupDef.name + \", skipping cleanup...\");\n                    promise.resolve();\n                }\n                else {\n                    rimraf(resolvedPath, rimrafOptions, function (error) {\n                        if (error) {\n                            fluid.log(fluid.logLevel.ERROR, \"Error removing \", cleanupDef.name, \" content:\", error);\n                        }\n                        else {\n                            fluid.log(\"Removed \", cleanupDef.name, \" content...\");\n                        }\n                        promise.resolve();\n                    });\n                }\n            }\n            catch (error) {\n                console.error(error);\n                promise.resolve();\n            }\n            return promise;\n        }\n    };\n};\n\n/**\n *\n * Clean up a bunch of directories based on test definitions that look like:\n *\n * {\n *  path: \"/path/to/junk\",\n *  name: \"random junk\",\n *  isTestemContent: true\n * }\n *\n * @param {String} stage -  A string describing which cleanup phase this is (typically \"initial\" or \"final\").\n * @param {Object} cleanupDefs - An array of cleanup definitions (see example above).\n * @param {Object} rimrafOptions - Configuration options to pass when calling rimraf.\n * @return {Promise} - A promise that will be resolved when cleanup is complete.\n *\n */\ngpii.testem.cleanup = function (stage, cleanupDefs, rimrafOptions) {\n    var togo = fluid.promise();\n    togo.then(function () { fluid.log(stage, \" cleanup completed successfully...\");});\n\n    var cleanupPromises = [];\n    fluid.each(cleanupDefs, function (singleDirEntry) {\n        var cleanupPromise = gpii.testem.cleanupDir(singleDirEntry, rimrafOptions);\n        cleanupPromises.push(cleanupPromise);\n    });\n\n    var sequence = fluid.promise.sequence(cleanupPromises);\n    sequence.then(togo.resolve, togo.reject);\n\n    return togo;\n};\n\n/**\n *\n * Generate a unique subdirectory path based on a supplied prefix and suffix.\n *\n * @param {String} basePath - A full or package-relative path to the subdirectory in which the new directory will live.\n * @param {String} prefix - A \"prefix\" that will be prepended to the filename.\n * @param {String} suffix - A \"suffix\" that will be appended to the end of the filename.\n * @return {String} - The full path to the unique subdirectory.\n */\ngpii.testem.generateUniqueDirName = function (basePath, prefix, suffix) {\n    try {\n        var resolvedBasePath = gpii.testem.resolveFluidModulePathSafely(basePath);\n        return path.resolve(resolvedBasePath, prefix + \"-\" + suffix);\n    }\n    catch (error) {\n        fluid.log(\"Error generating unique dir name:\", error);\n    }\n};\n\nfluid.registerNamespace(\"gpii.testem.dirs\");\n\n// A convenience variable to assist in cleaning up just the testem-unique temporary content.\ngpii.testem.dirs.onlyTestemContent = [\n    {\n        name:            \"testem\",\n        path:            \"{that}.options.testemDir\",\n        isTestemContent: true\n    }\n];\n\n// A convenience variable to assist in cleaning up everything but the coverage data.\ngpii.testem.dirs.everythingButCoverage = gpii.testem.dirs.onlyTestemContent.concat([\n    {\n        name: \"instrumented\",\n        path: \"{that}.options.instrumentedSourceDir\"\n    }\n]);\n\n// A convenience variable to assist in cleaning up everything, including coverage data.\ngpii.testem.dirs.everything = gpii.testem.dirs.everythingButCoverage.concat([\n    {\n        name: \"coverage\",\n        path: \"{that}.options.coverageDir\"\n    }\n]);\n\n// Stop our express instance if it has been created and hasn't already been destroyed.\ngpii.testem.stopServer = function (that) {\n    if (that.express && !fluid.isDestroyed(that.express)) {\n        fluid.log(\"Stopping express...\");\n        gpii.express.stopServer(that.express);\n    }\n};\n\n// An expander to allow us to toggle \"HEADLESS\" mode with an environment variable.\ngpii.testem.constructBrowserArgs = function (browserArgs, headlessBrowserArgs) {\n    return (process.env.HEADLESS && headlessBrowserArgs) || browserArgs;\n};\n\n/**\n *\n * Construct a full set of Testem proxy configuration options based on component options.\n *\n * @param {Object} sourceDirs - An object whose top-level values each refer to a source directory definition.\n * @param {Object} contentDirs - An object whose top-level values each refer to a content directory definition.\n * @param {Object} additionalProxies - An array of additional proxy paths that should be directed to `coverageUrl`.\n * @param {String} coverageUrl - The URL where the gpii-express instance that collects coverage data (and hosts our content) is located.\n * @return {Object} - An object representing Testem proxy configuration options.\n *\n */\ngpii.testem.constructProxies = function (sourceDirs, contentDirs, additionalProxies, coverageUrl) {\n    var proxies = {};\n\n    var dirPaths = [];\n    fluid.each([sourceDirs, contentDirs], function (dirDefs) {\n        var expandedDefs = fluid.transform(dirDefs, gpii.testem.expandPath);\n        var orderedDirDefs = fluid.parsePriorityRecords(expandedDefs, \"testem-proxy-paths\");\n        fluid.each(orderedDirDefs, function (pathDef) {\n            dirPaths.push(gpii.testem.extractProxyPath(pathDef));\n        });\n    });\n\n    fluid.each(additionalProxies, function (additionalProxyDestination) {\n        dirPaths.push(additionalProxyDestination);\n    });\n\n    fluid.each(dirPaths, function (dirPath) {\n        proxies[dirPath] = {\n            \"target\": coverageUrl\n        };\n    });\n\n    return proxies;\n};\n\nfluid.defaults(\"gpii.testem.base\", {\n    gradeNames:  [\"fluid.component\"],\n    coveragePort: 7000,\n    coverageUrl: {\n        expander: {\n            funcName: \"fluid.stringTemplate\",\n            args:     [\"http://localhost:%port\", { port: \"{that}.options.coveragePort\" }]\n        }\n    },\n    cwd: process.cwd(),\n    mergePolicy: {\n        cleanup: \"nomerge\"\n    },\n    rimrafOptions: {},\n    cleanup: {\n        initial:  gpii.testem.dirs.onlyTestemContent,\n        final:    gpii.testem.dirs.onlyTestemContent\n    },\n    testemDir: {\n        expander: {\n            funcName: \"gpii.testem.generateUniqueDirName\",\n            args:     [os.tmpdir(), \"user_data_dir\", \"{that}.id\"] // basePath, prefix, suffix\n        }\n    },\n    reportsDir: {\n        expander: {\n            funcName: \"gpii.testem.generateUniqueDirName\",\n            args:     [os.tmpdir(), \"reports\", \"{that}.id\"] // basePath, prefix, suffix\n        }\n    },\n    additionalProxies: {},\n    sourceDirs: {},\n    contentDirs: {},\n    testPages: [],\n    wrappedEventTimeout: 30000,\n    events: {\n        constructFixtures: null,\n        onTestemStart: null,\n        onTestemExit: null,\n        onExpressStarted: null,\n        onFixturesConstructed: {\n            events: {\n                onExpressStarted: \"onExpressStarted\"\n            }\n        },\n        stopFixtures: null,\n        onExpressStopped: null,\n        onFixturesStopped: {\n            events: {\n                onExpressStopped: \"onExpressStopped\"\n            }\n        }\n    },\n    \"browserArgs\": {\n        \"Chrome\": [\n            \"--disable-extensions\",\n            \"--memory-pressure-threshholds=1\",\n            \"--disk-cache-size=0\",\n            \"--disable-new-zip-unpacker\"\n        ]\n    },\n    \"headlessBrowserArgs\": {\n        \"Firefox\": [\n            \"--headless\"\n        ],\n        // See this ticket for details on the minimum options required to get \"headless\" Chrome working: https://github.com/testem/testem/issues/1106#issuecomment-298841383\n        \"Chrome\": [\n            \"--disable-gpu\",\n            \"--headless\",\n            \"--remote-debugging-port=9222\"\n        ]\n    },\n    testemOptions: {\n        // The timeout options and Chrome browser args are workaround to minimize \"browser disconnect\" errors.\n        // https://github.com/testem/testem/issues/777\n        browser_disconnect_timeout: 300, // Five minutes\n        browser_start_timeout:      300,\n        timeout: 300,\n        browser_args: \"@expand:gpii.testem.constructBrowserArgs({that}.options.browserArgs, {that}.options.headlessBrowserArgs)\",\n        framework:   \"qunit\",\n        tap_quiet_logs: true,\n        report_file: {\n            expander: {\n                funcName: \"gpii.testem.resolvePathSafely\",\n                args:     [\"{that}.options.reportsDir\", \"report.tap\"]\n            }\n        },\n        cwd: \"{that}.options.cwd\",\n        user_data_dir: \"{that}.options.testemDir\",\n        on_start: \"{that}.handleTestemStart\",\n        on_exit:  \"{that}.handleTestemExit\",\n        src_files: [], // Explicitly tell testem not to watch or host any \"source\" content.\n        serve_files: [], // Explicitly tell Testem not to host any additional content.\n        test_page: \"@expand:fluid.values({that}.options.testPages)\", // Ensure that we can use mergeable objects for test pages.\n        proxies: \"@expand:gpii.testem.constructProxies({that}.options.sourceDirs, {that}.options.contentDirs, {that}.options.additionalProxies, {that}.options.coverageUrl)\"\n    },\n    invokers: {\n        \"handleTestemStart\": {\n            funcName: \"gpii.testem.handleTestemLifecycleEvent\",\n            args:     [\"{that}.events.onTestemStart\", \"{arguments}.2\"] // componentEvent, testemCallback\n        },\n        \"handleTestemExit\": {\n            funcName: \"gpii.testem.handleTestemLifecycleEvent\",\n            args:     [\"{that}.events.onTestemExit\", \"{arguments}.2\"] // componentEvent, testemCallback\n        },\n        \"getTestemOptions\": {\n            funcName: \"gpii.testem.getTestemOptions\",\n            args:     [\"{that}\"]\n        }\n    },\n    listeners: {\n        // Disable default behavior to avoid double-stop.\n        \"onDestroy.stopServer\": {\n            funcName: \"fluid.identity\"\n        },\n        // The unified \"testem startup\" promise chain.\n        \"onTestemStart.cleanup\": {\n            priority: \"first\",\n            funcName: \"gpii.testem.cleanup\",\n            args:     [\"Initial\", \"{that}.options.cleanup.initial\", \"{that}.options.rimrafOptions\"] // , rimrafOptions\n        },\n        \"onTestemStart.constructFixtures\": {\n            priority: \"after:cleanup\",\n            func:     \"{that}.events.constructFixtures.fire\"\n        },\n        \"onTestemStart.waitForFixtures\": {\n            priority: \"after:constructFixtures\",\n            funcName: \"gpii.testem.wrapSecondaryEvent\",\n            args:     [\"{that}\", \"{that}.events.onFixturesConstructed\"] // that, event\n        },\n        // The unified \"testem shutdown\" promise chain.\n        \"onTestemExit.stopExpress\": {\n            priority: \"first\",\n            funcName: \"gpii.testem.stopServer\",\n            args:     [\"{that}\"]\n        },\n        \"onTestemExit.waitForFixtures\": {\n            priority: \"after:stopExpress\",\n            funcName: \"gpii.testem.wrapSecondaryEvent\",\n            args:     [\"{that}\", \"{that}.events.onFixturesStopped\"] // that, event\n        },\n        \"onTestemExit.cleanup\": {\n            priority: \"last\",\n            funcName: \"gpii.testem.cleanup\",\n            args:     [\"Final\", \"{that}.options.cleanup.final\", \"{that}.options.rimrafOptions\"] // cleanupDefs, rimrafOptions\n        }\n    },\n    components: {\n        express: {\n            type: \"gpii.testem.coverage.express\",\n            createOnEvent: \"constructFixtures\",\n            options: {\n                cwd:         \"{gpii.testem.base}.options.cwd\",\n                sourceDirs:  \"{gpii.testem.base}.options.sourceDirs\",\n                contentDirs: \"{gpii.testem.base}.options.contentDirs\",\n                port:        \"{gpii.testem.base}.options.coveragePort\",\n                listeners: {\n                    \"onStarted.notifyParent\": {\n                        func: \"{gpii.testem.base}.events.onExpressStarted.fire\"\n                    },\n                    \"onStopped.notifyParent\": {\n                        func: \"{gpii.testem.base}.events.onExpressStopped.fire\"\n                    }\n                }\n\n            }\n        }\n    }\n});\n\n/**\n *\n * Optionally instrument the source code under test.\n *\n * @param {Object} that - The component itself.\n * @return {Promise} - A promise that will be resolved or rejected when the instrumentation pass finishes.\n */\ngpii.testem.coverage.instrumentSource = function (that) {\n    fluid.log(\"Instrumenting source.\");\n    var promises = [];\n    var expandedDefs = fluid.transform(that.options.sourceDirs, gpii.testem.expandPath);\n\n    fluid.each(expandedDefs, function (sourcePathDef) {\n        var resolvedSourcePath = gpii.testem.resolvePackageOrCwdRelativePath(that.options.cwd, sourcePathDef.filePath);\n        promises.push(function () {\n            var lastDirSegment = gpii.testem.extractLastContentSegment(sourcePathDef, \"\");\n            var instrumentedPath = gpii.testem.resolvePackageOrCwdRelativePath(that.options.instrumentedSourceDir, lastDirSegment);\n            return gpii.testem.instrumenter.instrument(resolvedSourcePath, instrumentedPath, that.options.instrumentationOptions);\n        });\n    });\n    var sequence = fluid.promise.sequence(promises);\n    sequence.then(\n        function () {\n            fluid.log(\"Finished instrumentation...\");\n        },\n        function (error) {\n            console.error(\"Instrumentation error:\", error);\n            fluid.fail(error);\n        }\n    );\n    return sequence;\n};\n\n/**\n *\n * Produce a list of paths where our instrumented source will eventually be housed.\n *\n * @param {String} cwd - The full path to the current working directory.  Will be used to resolve relative paths.\n * @param {String} instrumentedSourceDir - The full path to the location where the instrumented source should be saved.\n * @param {Object} sourceDirs - A map of named source dirs that will instrumented and hosted.\n * @return {Array<String>} - An array of expanded paths.\n *\n */\ngpii.testem.coverage.expandInstrumentedSourceDirs = function (cwd, instrumentedSourceDir, sourceDirs) {\n    var expandedDefs = fluid.transform(sourceDirs, gpii.testem.expandPath);\n\n    return fluid.transform(expandedDefs, function (sourcePathDef) {\n        var lastDirSegment = gpii.testem.extractLastContentSegment(sourcePathDef, \"\");\n        var resolvedInstrumentedSourceDir = fluid.module.resolvePath(instrumentedSourceDir);\n        return path.resolve(resolvedInstrumentedSourceDir, lastDirSegment);\n    });\n};\n\n\n// A grade that adds the proxy configuration required to collect coverage data, but which does not itself instrument anything.\nfluid.defaults(\"gpii.testem.coverage\", {\n    gradeNames: [\"gpii.testem.base\"],\n    // The path where coverage data will be stored as it is collected.\n    coverageDir: {\n        expander: {\n            funcName: \"gpii.testem.generateUniqueDirName\",\n            args:     [os.tmpdir(), \"coverage\", \"{that}.id\"] // basePath, prefix, suffix\n        }\n    },\n    // The path where all instrumented source will be stored.\n    instrumentedSourceDir: {\n        expander: {\n            funcName: \"gpii.testem.generateUniqueDirName\",\n            args:     [os.tmpdir(), \"instrumented\", \"{that}.id\"] // basePath, prefix, suffix\n        }\n    },\n    // The full paths to individual pieces of instrumented source.\n    instrumentedSourceDirs: \"@expand:gpii.testem.coverage.expandInstrumentedSourceDirs({that}.options.cwd, {that}.options.instrumentedSourceDir, {that}.options.sourceDirs)\",\n    // The coverage server implicitly hosts a coverage client and listener, we use this block to include that in our generated list of proxies for all content.\n    additionalProxies: {\n        coverage: \"/coverage\"\n    },\n    distributeOptions: {\n        source: \"{that}.options.coverageDir\",\n        target: \"{that gpii.testem.coverage.receiver.middleware}.options.coverageDir\"\n    },\n    components: {\n        express: {\n            options: {\n                sourceDirs: \"{gpii.testem.coverage}.options.instrumentedSourceDirs\"\n            }\n        }\n    },\n    testemOptions: {\n        proxies: \"@expand:gpii.testem.constructProxies({that}.options.instrumentedSourceDirs, {that}.options.contentDirs, {that}.options.additionalProxies, {that}.options.coverageUrl)\"\n    }\n});\n\n// A grade that adds instrumentation of code, but which does not generate reports.\nfluid.defaults(\"gpii.testem.instrumentation\", {\n    gradeNames: [\"gpii.testem.coverage\"],\n    cleanup: {\n        initial:  gpii.testem.dirs.everythingButCoverage,\n        final:    gpii.testem.dirs.everythingButCoverage\n    },\n    instrumentationOptions: {},\n    // The path where all instrumented source will be stored.\n    instrumentedSourceDir: {\n        expander: {\n            funcName: \"gpii.testem.generateUniqueDirName\",\n            args:     [os.tmpdir(), \"instrumented\", \"{that}.id\"] // basePath, prefix, suffix\n        }\n    },\n    listeners: {\n        \"onTestemStart.instrument\": {\n            priority: \"after:cleanup\",\n            funcName: \"gpii.testem.coverage.instrumentSource\",\n            args:     [\"{that}\"]\n        },\n        \"onTestemStart.constructFixtures\": {\n            priority: \"after:instrument\",\n            func:     \"{that}.events.constructFixtures.fire\"\n        }\n    }\n});\n\n// The default grade, which instruments source, collects coverage data, and generates reports.\nfluid.defaults(\"gpii.testem\", {\n    gradeNames:  [\"gpii.testem.instrumentation\"],\n    reports: [\"text-summary\", \"html\", \"json-summary\"],\n    cleanup: {\n        initial:  gpii.testem.dirs.everything,\n        final:    gpii.testem.dirs.everything\n    },\n    listeners: {\n        \"onTestemExit.coverageReport\": {\n            priority: \"after:waitForFixtures\",\n            funcName: \"{that}.reporter.report\"\n        }\n    },\n    components: {\n        reporter: {\n            type: \"gpii.testem.reporter\",\n            options: {\n                coverageDir: \"{gpii.testem}.options.coverageDir\",\n                cwd:         \"{gpii.testem}.options.cwd\",\n                reportsDir:  \"{gpii.testem}.options.reportsDir\",\n                reports:     \"{gpii.testem}.options.reports\"\n            }\n        }\n    }\n});\n"
  ]
}