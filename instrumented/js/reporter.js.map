{
  "version": 3,
  "sources": [
    "/Users/duhrer/Source/rtf/gpii-testem/src/js/reporter.js"
  ],
  "names": [
    "fluid",
    "require",
    "gpii",
    "registerNamespace",
    "NYC",
    "process",
    "testem",
    "reporter",
    "report",
    "that",
    "log",
    "promise",
    "nyc",
    "options",
    "nycOptions",
    "resolve",
    "error",
    "console",
    "JSON",
    "stringify",
    "reject",
    "stack",
    "message",
    "defaults",
    "gradeNames",
    "reportsDir",
    "coverageDir",
    "reports",
    "cwd",
    "reportDir",
    "tempDirectory",
    "invokers",
    "funcName",
    "args"
  ],
  "mappings": "AAOA,a,ghEACA,GAAIA,8BAAUC,QAAQ,UAAR,CAAV,CAAJ,CACA,GAAIC,6BAAUF,MAAMG,iBAAN,CAAwB,MAAxB,CAAV,CAAJ,CACA,GAAIC,4BAAUH,QAAQ,KAAR,CAAV,CAAJ,CACA,GAAII,gCAAUJ,QAAQ,SAAR,CAAV,CAAJ,C,sBAEAA,QAAQ,qBAAR,E,sBAEAD,MAAMG,iBAAN,CAAwB,sBAAxB,E,sBAEAD,KAAKI,MAAL,CAAYC,QAAZ,CAAqBC,MAArB,CAA8B,SAAUC,IAAV,CAAgB,6CAC1CT,MAAMU,GAAN,CAAU,6BAAV,EACA,GAAIC,gCAAUX,MAAMW,OAAN,EAAV,CAAJ,CACA,GAAIC,4BAAM,GAAIR,IAAJ,CAAQK,KAAKI,OAAL,CAAaC,UAArB,CAAN,CAAJ,CAH0C,uBAI1C,GAAI,wBACAF,IAAIJ,MAAJ,GADA,uBAEAG,QAAQI,OAAR,GACH,CACD,MAAOC,KAAP,CAAc,wBACVC,QAAQP,GAAR,CAAY,YAAZ,CAA0BQ,KAAKC,SAAL,CAAeH,KAAf,CAAsB,IAAtB,CAA4B,CAA5B,CAA1B,EADU,uBAEVL,QAAQS,MAAR,CAAe,gCAAMC,KAAN,6BAAeL,MAAMM,OAArB,6BAAgCN,KAAhC,CAAf,EACH,CAXyC,uBAY1C,MAAOL,QAAP,CACH,CAbD,C,uBAeAX,MAAMuB,QAAN,CAAe,sBAAf,CAAuC,CACnCC,WAAa,CAAC,iBAAD,CADsB,CAEnCC,WAAa,SAFsB,CAGnCC,YAAa,UAHsB,CAInCC,QAAa,CAAC,MAAD,CAAS,cAAT,CAJsB,CAKnCC,IAAavB,QAAQuB,GAAR,EALsB,CAMnCd,WAAY,CACRc,IAAe,sEADP,CAERrB,SAAe,iDAFP,CAGRsB,UAAe,6EAHP,CAIRC,cAAe,8EAJP,CANuB,CAYnCC,SAAU,CACNvB,OAAQ,CACJwB,SAAU,6BADN,CAEJC,KAAU,CAAC,QAAD,CAFN,CADF,CAZyB,CAAvC",
  "sourcesContent": [
    "/*\n\n    A lightweight wrapper around the reporting library used by nyc.js, so that we can directly make use of it in a\n    unified Testem run without spawning child processes.\n\n */\n/* eslint-env node */\n\"use strict\";\nvar fluid   = require(\"infusion\");\nvar gpii    = fluid.registerNamespace(\"gpii\");\nvar NYC     = require(\"nyc\");\nvar process = require(\"process\");\n\nrequire(\"./lib/resolveSafely\");\n\nfluid.registerNamespace(\"gpii.testem.reporter\");\n\ngpii.testem.reporter.report = function (that) {\n    fluid.log(\"Generating coverage report.\");\n    var promise = fluid.promise();\n    var nyc = new NYC(that.options.nycOptions);\n    try {\n        nyc.report();\n        promise.resolve();\n    }\n    catch (error) {\n        console.log(\"NYC ERROR:\", JSON.stringify(error, null, 2));\n        promise.reject(error.stack || error.message || error);\n    }\n    return promise;\n};\n\nfluid.defaults(\"gpii.testem.reporter\", {\n    gradeNames:  [\"fluid.component\"],\n    reportsDir:  \"reports\",\n    coverageDir: \"coverage\",\n    reports:     [\"html\", \"text-summary\"],\n    cwd:         process.cwd(),\n    nycOptions: {\n        cwd:           \"@expand:gpii.testem.resolveFluidModulePathSafely({that}.options.cwd)\",\n        reporter:      \"@expand:fluid.makeArray({that}.options.reports)\",\n        reportDir:     \"@expand:gpii.testem.resolveFluidModulePathSafely({that}.options.reportsDir)\",\n        tempDirectory: \"@expand:gpii.testem.resolveFluidModulePathSafely({that}.options.coverageDir)\"\n    },\n    invokers: {\n        report: {\n            funcName: \"gpii.testem.reporter.report\",\n            args:     [\"{that}\"]\n        }\n    }\n});\n"
  ]
}