{
  "version": 3,
  "sources": [
    "/Users/duhrer/Source/rtf/gpii-testem/src/js/lib/pathUtils.js"
  ],
  "names": [
    "fluid",
    "require",
    "gpii",
    "registerNamespace",
    "path",
    "testem",
    "extractLastPathSegment",
    "rawPath",
    "leader",
    "resolvedPath",
    "module",
    "resolvePath",
    "forceLeadingSlash",
    "basename",
    "indexOf",
    "fail",
    "extractContentPath",
    "cwd",
    "pathDef",
    "expandedPathDef",
    "expandPath",
    "get",
    "resolvePackageOrCwdRelativePath",
    "extractLastContentSegment",
    "extractRoutePath",
    "extractProxyPath",
    "pathToResolve",
    "resolve",
    "singlePathDef",
    "filePath"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* eslint-env node */\n\"use strict\";\nvar fluid = require(\"infusion\");\nvar gpii  = fluid.registerNamespace(\"gpii\");\n\nvar path = require(\"path\");\n\nfluid.registerNamespace(\"gpii.testem\");\n\n/**\n *\n * Resolve a package-relative path and return the last segment, optionally prefixed by a `leader`.\n *\n * @param {String} rawPath - A full or package-relative path to filesystem content.\n * @param {String} leader - A string to prepend to the last segment.  Defaults to `/`.  Set this to an empty string to disable.\n * @return {String} - The last segment of the resolved path, prefixed by `leader`.\n *\n */\ngpii.testem.extractLastPathSegment = function (rawPath, leader) {\n    var resolvedPath = fluid.module.resolvePath(rawPath);\n    return gpii.testem.forceLeadingSlash(path.basename(resolvedPath), leader);\n};\n\n/**\n *\n * Ensure that the path segment is preceded by a leader (defaults to a leading slash).\n *\n * @param {String} rawPath - A path to be prefixed if needed.\n * @param {String} leader - The leader to prefix the path with.\n * @return {String} - The path, updated as needed to ensure that it begins with `leader`.\n *\n */\ngpii.testem.forceLeadingSlash = function (rawPath, leader) {\n    leader = (leader || leader === \"\") ? leader : \"/\";\n    if (typeof rawPath === \"string\") {\n        return rawPath.indexOf(leader) === 0 ? rawPath : leader + rawPath;\n    }\n    else {\n        fluid.fail(\"Cannot handle non-string path.\");\n    }\n};\n\n\n/**\n *\n * Derive the filesystem path that should be used to host a given content definition.  Accepts a string representing a\n * package-relative path (\"short\" notation) or a full directory definition (\"long\" notation).  See the docs in this\n * package for details.\n *\n * @param {String} cwd - The path to the currrent working directory.\n * @param {String|Object} pathDef - A string representing a single package-relative path, or an object with the definition broken out more granularly.\n * @return {String} - The router path, typically something like `/src`.\n *\n */\ngpii.testem.extractContentPath = function (cwd, pathDef) {\n    var expandedPathDef = gpii.testem.expandPath(pathDef);\n    var rawPath = fluid.get(expandedPathDef, \"filePath\");\n    return gpii.testem.resolvePackageOrCwdRelativePath(cwd, rawPath);\n};\n\n/**\n *\n * Extract the last part of the \"content\" path (so that we can, for example, create the same relative directory structure in the \"instrumented\" directory).\n *\n * @param {String|Object} pathDef - A path definition in either short (string) or long (object) notation.\n * @param {String} leader - An optional replacement \"leader\".  Set to \"/\" by default.  Set this to \"\" to disable.\n * @return {String} - The last segment of the content path.\n *\n */\ngpii.testem.extractLastContentSegment = function (pathDef, leader) {\n    var expandedPathDef = gpii.testem.expandPath(pathDef);\n    return gpii.testem.extractLastPathSegment(fluid.get(expandedPathDef, \"filePath\"), leader);\n};\n\n/**\n *\n * Derive the router path that should be used to host a given content definition.  Accepts a string representing a\n * package-relative path (\"short\" notation) or a full directory definition (\"long\" notation).  See the docs in this\n * package for details.\n *\n * @param {String|Object} pathDef - A string representing a single package-relative path, or an object with the definition broken out more granularly.\n * @return {String} - The router path, typically something like `/src`.\n *\n */\ngpii.testem.extractRoutePath = function (pathDef) {\n    var expandedPathDef = gpii.testem.expandPath(pathDef);\n    return fluid.get(expandedPathDef, \"routePath\") || gpii.testem.extractLastContentSegment(expandedPathDef);\n};\n\n\n/**\n *\n * Derive the proxy path that should be used to host a given content definition.  Accepts a string representing a\n * package-relative path (\"short\" notation) or a full directory definition (\"long\" notation).  See the docs in this\n * package for details.\n *\n * @param {String|Object} pathDef - A string representing a single package-relative path, or an object with the definition broken out more granularly.\n * @return {String} - The proxy path, typically something like `/src`.\n *\n */\ngpii.testem.extractProxyPath = function (pathDef) {\n    var expandedPathDef = gpii.testem.expandPath(pathDef);\n    return fluid.get(expandedPathDef, \"proxyPath\") || gpii.testem.extractLastContentSegment(expandedPathDef);\n};\n\n/**\n *\n * Resolve either a package-relative or cwd-relative path safely.  If `pathToResolve` is package relative or full,\n * it will be preserved.  If `pathToResolve` is a simple relative path (i.e. `src` or `./src`) it will be resolved\n * relative to `cwd`.\n *\n * @param {String} cwd - The full path to the current working directory.\n * @param {String} pathToResolve - A relative, full, or package-relative path to resolve.\n * @return {String} - The resolved full path.\n *\n */\ngpii.testem.resolvePackageOrCwdRelativePath = function (cwd, pathToResolve) {\n    return path.resolve(cwd, fluid.module.resolvePath(pathToResolve));\n};\n\n/**\n *\n * Helper function that expands a single \"short\" notation path definition (a string representing the path to a\n * directory) to \"long notation\" (an object with a `filePath` element).\n *\n * @param {String|Object} singlePathDef - A single path definition, either in \"short\" form (a string) or \"long\" form (an object).\n * @return {Object} - The \"long\" notation for this path definition.\n *\n */\ngpii.testem.expandPath = function (singlePathDef) {\n    return typeof singlePathDef === \"string\" ? { filePath: singlePathDef } : singlePathDef;\n};\n"
  ]
}