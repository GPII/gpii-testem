{
  "version": 3,
  "sources": [
    "/Users/duhrer/Source/rtf/gpii-testem/src/js/lib/resolveSafely.js"
  ],
  "names": [
    "fluid",
    "require",
    "gpii",
    "registerNamespace",
    "path",
    "testem",
    "resolvePathSafely",
    "pathToResolve",
    "filename",
    "resolvedPath",
    "resolve",
    "error",
    "console",
    "resolveFluidModulePathSafely",
    "module",
    "resolvePath"
  ],
  "mappings": "AACA,a,2uDACA,GAAIA,8BAAQC,QAAQ,UAAR,CAAR,CAAJ,CACA,GAAIC,6BAAQF,MAAMG,iBAAN,CAAwB,MAAxB,CAAR,CAAJ,CAEA,GAAIC,6BAAOH,QAAQ,MAAR,CAAP,CAAJ,C,sBAEAD,MAAMG,iBAAN,CAAwB,aAAxB,E,sBAIAD,KAAKG,MAAL,CAAYC,iBAAZ,CAAgC,SAAUC,aAAV,CAAyBC,QAAzB,CAAmC,6CAC/D,GAAI,CACA,GAAIC,qCAAeL,KAAKM,OAAL,CAAaH,aAAb,CAA4BC,QAA5B,CAAf,CAAJ,CADA,sBAEA,MAAOC,aAAP,CACH,CACD,MAAOE,KAAP,CAAc,uBACVC,QAAQD,KAAR,CAAcA,KAAd,EACH,CACJ,CARD,C,sBAiBAT,KAAKG,MAAL,CAAYQ,4BAAZ,CAA2C,SAAUT,IAAV,CAAgB,8CACvD,GAAI,CACA,GAAIK,sCAAeT,MAAMc,MAAN,CAAaC,WAAb,CAAyBX,IAAzB,CAAf,CAAJ,CADA,uBAEA,MAAOK,aAAP,CACH,CACD,MAAOE,KAAP,CAAc,wBACVC,QAAQD,KAAR,CAAcA,KAAd,EACH,CACJ,CARD",
  "sourcesContent": [
    "/* eslint-env node */\n\"use strict\";\nvar fluid = require(\"infusion\");\nvar gpii  = fluid.registerNamespace(\"gpii\");\n\nvar path = require(\"path\");\n\nfluid.registerNamespace(\"gpii.testem\");\n\n// If we call path.resolve directly from an expansion definition, we can't cleanly handle errors.  So, we use this\n// convenience function.  It's important to trap errors which might prevent Testem callbacks from being triggered.\ngpii.testem.resolvePathSafely = function (pathToResolve, filename) {\n    try {\n        var resolvedPath = path.resolve(pathToResolve, filename);\n        return resolvedPath;\n    }\n    catch (error) {\n        console.error(error);\n    }\n};\n\n/**\n *\n * Another wrapper to ensure that invalid or missing paths do not break the overall lifecycle of a testem component.\n *\n * @param {String} path - The path to resolve.\n * @return {String} - The resolved path.\n */\ngpii.testem.resolveFluidModulePathSafely = function (path) {\n    try {\n        var resolvedPath = fluid.module.resolvePath(path);\n        return resolvedPath;\n    }\n    catch (error) {\n        console.error(error);\n    }\n};\n"
  ]
}