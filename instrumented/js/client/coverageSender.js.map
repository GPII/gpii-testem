{
  "version": 3,
  "sources": [
    "/Users/duhrer/Source/rtf/gpii-testem/src/js/client/coverageSender.js"
  ],
  "names": [
    "Testem",
    "QUnit",
    "window",
    "gpii",
    "testem",
    "coverage",
    "sender",
    "options",
    "afterTestsCallback",
    "config",
    "data",
    "testemCallback",
    "__coverage__",
    "xhr",
    "XMLHttpRequest",
    "onreadystatechange",
    "readyState",
    "status",
    "console",
    "log",
    "error",
    "responseText",
    "open",
    "coveragePort",
    "setRequestHeader",
    "wrappedPayload",
    "payload",
    "document",
    "title",
    "URL",
    "navigator",
    "appCodeName",
    "appName",
    "product",
    "productSub",
    "userAgent",
    "vendor",
    "vendorSub",
    "send",
    "JSON",
    "stringify",
    "fluid",
    "hookTestem",
    "get",
    "afterTests",
    "hookQUnit",
    "done"
  ],
  "mappings": "qmLAiBA,CAAC,SAAUA,MAAV,CAAkBC,KAAlB,CAAyB,CACtB,aADsB,4CAGtBC,OAAOC,IAAP,CAAc,iCAAOA,IAAP,6BAAe,EAAf,CAAd,CAHsB,sBAItBD,OAAOC,IAAP,CAAYC,MAAZ,CAAqB,iCAAOD,IAAP,CAAYC,MAAZ,6BAAsB,EAAtB,CAArB,CAJsB,sBAKtBF,OAAOC,IAAP,CAAYC,MAAZ,CAAmBC,QAAnB,CAA8B,iCAAOF,IAAP,CAAYC,MAAZ,CAAmBC,QAAnB,6BAA+B,EAA/B,CAA9B,CALsB,sBAStBH,OAAOC,IAAP,CAAYC,MAAZ,CAAmBC,QAAnB,CAA4BC,MAA5B,CAAqC,SAAUC,OAAV,CAAmB,6CACpD,GAAIC,oBAAqB,SAAUC,MAAV,CAAkBC,IAAlB,CAAwBC,cAAxB,CAAwC,6CAC7D,GAAIT,OAAOU,YAAX,CAAyB,0BACrB,GAAIC,4BAAM,GAAIC,eAAJ,EAAN,CAAJ,CADqB,sBAErBD,IAAIE,kBAAJ,CAAyB,UAAY,6CACjC,GAAI,KAAKC,UAAL,GAAoB,CAAxB,CAA2B,iDACvB,GAAI,KAAKC,MAAL,GAAgB,GAApB,CAAyB,iDACrBC,QAAQC,GAAR,CAAY,sBAAZ,EACH,CAFD,IAGK,iDACDD,QAAQE,KAAR,CAAc,6BAAd,CAA6C,KAAKC,YAAlD,EACH,CANsB,uBAQvB,GAAIV,cAAJ,CAAoB,iDAChBA,iBACH,CAFD,+BAGH,CAXD,+BAYH,CAbD,CAFqB,uBAgBrBE,IAAIS,IAAJ,CAAS,MAAT,CAAiB,oBAAsBf,QAAQgB,YAA9B,CAA6C,WAA9D,EAhBqB,uBAiBrBV,IAAIW,gBAAJ,CAAqB,cAArB,CAAqC,kBAArC,EACA,GAAIC,wCAAiB,CACjBC,QAAS,CACLC,SAAU,CACNC,MAAOD,SAASC,KADV,CAENC,IAAKF,SAASE,GAFR,CADL,CAKLC,UAAW,CACPC,YAAaD,UAAUC,WADhB,CAEPC,QAASF,UAAUE,OAFZ,CAGPC,QAASH,UAAUG,OAHZ,CAIPC,WAAYJ,UAAUI,UAJf,CAKPC,UAAWL,UAAUK,SALd,CAMPC,OAAQN,UAAUM,MANX,CAOPC,UAAWP,UAAUO,SAPd,CALN,CAcLhC,SAAUH,OAAOU,YAdZ,CADQ,CAAjB,CAAJ,CAlBqB,uBAoCrBC,IAAIyB,IAAJ,CAASC,KAAKC,SAAL,CAAef,cAAf,CAA+B,IAA/B,CAAqC,CAArC,CAAT,EACH,CArCD,IAsCK,oDAAId,cAAJ,CAAoB,iDACrB8B,MAAMtB,GAAN,CAAU,yDAAV,EADqB,uBAErBR,iBACH,CAHI,+BAGJ,CACJ,CA3CD,CA6CA,GAAI+B,oCAAaD,MAAME,GAAN,CAAUpC,OAAV,CAAmB,YAAnB,CAAb,CAAJ,CA9CoD,uBA+CpD,GAAI,iEAAcP,MAAd,CAAJ,CAA0B,iDACtBA,OAAO4C,UAAP,CAAkBpC,kBAAlB,EACH,CAFD,+BAIA,GAAIqC,mCAAYJ,MAAME,GAAN,CAAUpC,OAAV,CAAmB,WAAnB,CAAZ,CAAJ,CAnDoD,uBAoDpD,GAAI,kEAAaN,KAAb,CAAJ,CAAwB,kDACpBA,MAAM6C,IAAN,CAAWtC,kBAAX,EACH,CAFD,gCAGH,CAvDD,CAwDH,CAjED,EAiEG,MAAOR,OAAP,GAAkB,WAAlB,4BAAgCA,MAAhC,6BAAyC,KAAzC,CAjEH,CAiEmDC,KAjEnD",
  "sourcesContent": [
    "/*\n\n    Client side component to send coverage data after each page's test run.  Served up by the \"coverage\" engine\n    wired into gpii.testem, by default this is available at:\n\n    <script src=\"/coverage/client/coverageSender.js\"></script>\n\n    NOTE: This script requires Testem, and must be loaded after Testem loads, but before your tests start.\n\n    Adapted from https://github.com/testem/testem/blob/master/examples/coverage_istanbul/tests.html#L11\n\n    The harness included with this package will concatenate this with a bit of javascript that instantiates the\n    sender with the right port information.  If you are using this script in another context, you will need to take\n    care of that yourself.\n\n */\n/* globals Testem, QUnit */\n(function (Testem, QUnit) {\n    \"use strict\";\n    // Pure JS equivalent of a fluid.registerNamespace call.\n    window.gpii = window.gpii || {};\n    window.gpii.testem = window.gpii.testem || {};\n    window.gpii.testem.coverage = window.gpii.testem.coverage || {};\n\n    // A work-alike pure JS implementation of the previous gpii.testem.coverage.sender grade.\n    // NOTE: Only options.coveragePort is meaningful.\n    window.gpii.testem.coverage.sender = function (options) {\n        var afterTestsCallback = function (config, data, testemCallback) {\n            if (window.__coverage__) {\n                var xhr = new XMLHttpRequest();\n                xhr.onreadystatechange = function () {\n                    if (this.readyState === 4) {\n                        if (this.status === 200) {\n                            console.log(\"Saved coverage data.\");\n                        }\n                        else {\n                            console.error(\"Error saving coverage data:\", this.responseText);\n                        }\n\n                        if (testemCallback) {\n                            testemCallback();\n                        }\n                    }\n                };\n                xhr.open(\"POST\", \"http://localhost:\" + options.coveragePort + \"/coverage\");\n                xhr.setRequestHeader(\"Content-type\", \"application/json\");\n                var wrappedPayload = {\n                    payload: {\n                        document: {\n                            title: document.title,\n                            URL: document.URL\n                        },\n                        navigator: {\n                            appCodeName: navigator.appCodeName,\n                            appName: navigator.appName,\n                            product: navigator.product,\n                            productSub: navigator.productSub,\n                            userAgent: navigator.userAgent,\n                            vendor: navigator.vendor,\n                            vendorSub: navigator.vendorSub\n                        },\n                        coverage: window.__coverage__\n                    }\n                };\n                xhr.send(JSON.stringify(wrappedPayload, null, 2));\n            }\n            else if (testemCallback) {\n                fluid.log(\"No coverage data, firing Testem callback immediately...\");\n                testemCallback();\n            }\n        };\n\n        var hookTestem = fluid.get(options, \"hookTestem\");\n        if (hookTestem && Testem) {\n            Testem.afterTests(afterTestsCallback);\n        }\n\n        var hookQUnit = fluid.get(options, \"hookQUnit\");\n        if (hookQUnit && QUnit) {\n            QUnit.done(afterTestsCallback);\n        }\n    };\n})(typeof Testem !== \"undefined\" ? Testem : false, QUnit);\n"
  ]
}